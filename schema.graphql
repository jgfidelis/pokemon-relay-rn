"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pokemon {
  """The ID of an object"""
  id: ID!
  name: String!
  number: Int!
  imageUrl: String!
  weight: Int!
  height: Int!
  types: [String]
}

"""A connection to a list of items."""
type PokemonConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [PokemonEdge]!
}

"""An edge in a connection."""
type PokemonEdge {
  """The item at the end of the edge"""
  node: Pokemon

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  allPokemon: [Pokemon]
  pokemons(after: String, first: Int, before: String, last: Int): PokemonConnection
}
